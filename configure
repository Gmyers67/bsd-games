#! /bin/sh
######################################################################
#### Project Configuration ###########################################
######################################################################

PKG_NAME="bsdgames"
PKG_VERSTR="v3.0"
PKG_BUGREPORT="Mike Sharov <msharov@users.sourceforge.net>"

# Files that get created by this script
FILES="Config.mk config.h"

# Package options
COMPONENTS='
{
name=[with-debug]
desc=[	compile for debugging]
seds=[s/^#\(DEBUG\)/\1/]
}';

# Header files
HEADERS="ncurses.h"

# Libraries
LIBS="ncurses m"

# First pair is used if nothing matches
PROGS="CC=gcc CC=clang CXX=g++ CXX=clang++ INSTALL=install PAGER=less PAGER=more"

# Automatic vars
[ -d .git ] && PKG_VERSTR=`git describe --always --tags`
PKG_MAJOR=`expr "$PKG_VERSTR" : 'v\([0-9]*\)\.[0-9]*'`
PKG_MINOR=`expr "$PKG_VERSTR" : 'v[0-9]*\.\([0-9]*\)'`
PKG_STRING="$PKG_NAME $PKG_VERSTR"
PKG_VERSION="0x$PKG_MAJOR${PKG_MINOR}"
if [ "$PKG_VERSION" = "0x" ]; then
    PKG_VERSION="0x30"
fi

# Miscellaneous substitutions
CUSTSUBS="s/@PKG_NAME@/$PKG_NAME/
s/@PKG_VERSION@/$PKG_VERSION/
s/@PKG_VERSTR@/$PKG_VERSTR/
s/@PKG_STRING@/$PKG_STRING/
s/@PKG_UNAME@/`echo $PKG_NAME|tr a-z A-Z`/
s/@PKG_BUGREPORT@/$PKG_BUGREPORT/
s/@PKG_MAJOR@/$PKG_MAJOR/
s/@PKG_MINOR@/$PKG_MINOR/"

######################################################################
#### The rest of the file is configuration code. Leave it alone. #####
######################################################################

die() { rm -f config.sed; exit; }
sub() { printf "%s\n" "$1">>config.sed; }
escpath() { echo $1 | sed 's/\//\\\//g'; }

# Find the C compiler
if [ -z "$CC" ]; then
    for i in gcc clang cc g++ clang++ c++; do
	CC=`which $i 2>/dev/null` && break
    done
fi
[ -z "$CC" ] && "No C compiler found" && die
CC=`basename $CC`

#### Set host-dependent options ######################################

SYSNAME=`uname|tr A-Z a-z`
case "$SYSNAME" in
    *solaris*| *sun*)	SYSNAME="sun";;
    *darwin*| *osx*)	SYSNAME="mac";;
    *bsd*)		SYSNAME="bsd";;
    *)			SYSNAME="linux";;
esac
if [ "$SYSNAME" = "sun" ]; then
    sub "s/-Wredundant-decls/-Wno-redundant-decls/"
else
    sub "s/#undef \(HAVE_THREE_CHAR_TYPES\)/#define \1 1/"
    if [ "$SYSNAME" = "bsd" ]; then
	sub 's/-Wredundant-decls/-Wno-redundant-decls/
		s/#define HAVE_VA_COPY 1/#undef HAVE_VA_COPY/'
    elif [ "$SYSNAME" = "mac" ]; then
	sub 's/ -s -Wl,-gc-sections/ -mmacosx-version-min=10.9/'
	if [ "$CC" = "clang" ]; then
	    sub "s/ @libsupc++@/ @libc++abi@/"
	fi
    fi
    if [ "$SYSNAME" != "linux" ]; then
	sub "s/#define \(HAVE_STRSIGNAL\) 1/#undef \1/
		s/-p --ignore-fail-on-non-empty//"
    fi
fi

#### Printing helper functions #######################################

PrintHelp() {
    local cc name desc
    echo "This program configures $PKG_STRING

Usage: configure [OPTION...]

Configuration:
  -h, --help		display this help and exit
  -V, --version		display version information and exit

Installation directories:
  --prefix=PREFIX	architecture-independent files [/usr/local]
  --bindir=DIR		executables [PREFIX/bin]
  --libdir=DIR		object code libraries [PREFIX/lib]
  --datadir=DIR		platform-independent data [PREFIX/share]
  --localstatedir=DIR	runtime state [/var/lib]
  --mandir=DIR		man page location [PREFIX/man]
  --includedir=DIR	C header files [PREFIX/include]
  --wordlist=dictionary	word list location [DATADIR/dict/words]
  --customincdir=DIR	Additional include directory
  --customlibdir=DIR	Additional library directory
  --builddir=DIR	location for compiled objects [/tmp/$USER/make]
"
    cc=$COMPONENTS
    echo "Options:"
    while [ ! -z "$cc" ]; do
	name=`expr "$cc" : '[^}]*name=\[\([^]]*\)\]'`
	desc=`expr "$cc" : '[^}]*desc=\[\([^]]*\)\]'`
	echo "  --$name	$desc"
	cc=`expr "$cc" : '[^}]*}\(.*\)'`
    done
    echo
    echo "Report bugs to $PKG_BUGREPORT."
}

SubVar() {
    local esc2
    esc2=`escpath $2`
    eval ac_var_$1='$esc2';
    sub "s/@$1@/$esc2/g"
}

SubComp() {
    local cc name seds
    cc=$COMPONENTS
    while [ ! -z "$cc" ]; do
	name=`expr "$cc" : '[^}]*name=\[\([^]]*\)\]'`
	seds=`expr "$cc" : '[^}]*seds=\[\([^]]*\)\]'`
	[ "$name" = "$1" ] && sub "$seds"
	cc=`expr "$cc" : '[^}]*}\(.*\)'`
    done
}

for i in $*; do
    case $i in
	--)		break;;
	--version |-V)	echo "$PKG_NAME configure $PKG_VERSTR" && die;;
	--help |-h |-?)	PrintHelp && die;;
	--*=*)		SubVar `expr "$i" : '--\([^=]*\)='` `expr "$i" : '[^=]*=\(.*\)'`;;
	--*)		SubComp `expr "$i" : '--\(.*\)'`;;
	*)		echo "Error: unrecognized option \"$i\"" && die;;
    esac
done

#### Set directory prefixes ##########################################

sub "s/@prefix@/${ac_var_prefix:=\/usr\/local}/
s/@bindir@/$ac_var_prefix\/bin/
s/@libdir@/${ac_var_libdir:=$ac_var_prefix\/lib}/
s/@datadir@/${ac_var_datadir:=$ac_var_prefix\/share}/
s/@localstatedir@/${ac_var_localstatedir:=\/var\/lib}/
s/@mandir@/$ac_var_datadir\/man/
s/@docdir@/${ac_var_docdir:=$ac_var_datadir\/doc}/
s/@includedir@/${ac_var_includedir:=$ac_var_prefix\/include}/
s/@wordlist@/$ac_var_datadir\/dict\/words/
s/@oldincludedir@/${ac_var_oldincludedir:=\/usr\/include}/
s/@builddir@/\/tmp\/$USER\/make/"

[ -z "$ac_var_customincdir" ] || CINCSUB=" -I$ac_var_customincdir"
[ -z "$ac_var_customlibdir" ] || CLIBSUB=" -L$ac_var_customlibdir"
if [ "$ac_var_prefix" != "\/usr" -a "$ac_var_prefix" != "\/usr\/local" ]; then
    CINCSUB="$CINCSUB -I$ac_var_prefix\/include"
    CLIBSUB="$CLIBSUB -L$ac_var_prefix\/lib"
fi
sub "s/ @CUSTOMINCDIR@/$CINCSUB/;s/ @CUSTOMLIBDIR@/$CLIBSUB/"

#### Find headers, libs, programs, and subs ##########################

INCPATH="$ac_var_includedir $ac_var_customincdir $ac_var_oldincludedir /usr/include/x86_64-linux-gnu"
INCPATH=`echo $INCPATH | sed 's/\\\\//g'`
for i in $HEADERS; do
    for p in $INCPATH; do
	if [ -r "$p/$i" ]; then
	    sub "s/#undef \(HAVE_`echo $i|tr a-z/.- A-Z___`\)/#define \1 1/"
	    break
	fi
    done
done

LIBPATH="`echo $LD_LIBRARY_PATH | tr ':' ' '` $ac_var_libdir $ac_var_customlibdir /lib /usr/lib /usr/local/lib /usr/lib/x86_64-linux-gnu"
LIBPATH=`echo $LIBPATH | sed 's/\\\\//g'`
LIBSUFFIX="so a la dylib"
for i in $LIBS; do
    found=
    for p in $LIBPATH; do
	for s in $LIBSUFFIX; do
	    if [ -r "$p/lib$i.$s" ]; then
		found=" -l$i"
		break
	    fi
	done
	[ -z "$found" ] || break
    done
    sub "s/ @lib$i@/$found/g"
done

for i in $PROGS; do
    pname=`expr "$i" : '\([^=]*\)=[^=]*'`
    pcall=`expr "$i" : '[^=]*=\([^=]*\)'`
    ppath=`eval echo \$\{$pname\}`
    ppath=`escpath "$ppath"`
    # First check if an environment variable is set
    [ ! -z "$ppath" ] && sub "s/@$pname@/$ppath/g"
    # Check if the program exists
    [ -x `which $pcall 2>/dev/null` ] && sub "s/@$pname@/$pcall/g"
done
# If nothing found in first loop, set the first pair anyway.
for i in $PROGS; do
    pname=`expr "$i" : '\([^=]*\)=[^=]*'`
    pcall=`expr "$i" : '[^=]*=\([^=]*\)'`
    sub "s/@$pname@/$pcall/g"
done
# And, finally, the environment variables
for i in $ENVIRONS; do
    esciv="`eval echo '"'\$\{$i\}'"'|sed 's/\//\\\&/g'`"
    ppath=`eval echo \$\{$pname\}`
    ppath=`escpath "$ppath"`
    [ ! -z "$ppath" ] && ppath=" $ppath"
    sub "s/ @$i@/$ppath/g"
done
sub "$CUSTSUBS"

#### Apply substitutions to all files ################################

for i in $FILES; do
    sed -f config.sed $i.in > $i
done

touch config.status
echo "#! /bin/sh
$0 $*
`tail -n+3 config.status`" > config.status.new
chmod u+x config.status.new
mv config.status.new config.status

die
